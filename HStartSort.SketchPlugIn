// (ctrl shift M)



/*
 * Align Rect To frame for Sketch.app
 * Author: Tingji Liu
 * Version: 1.0
 */


var biggestItemNumber=-1;
var biggestNumber = 0;
var index = 0;
var minXX = 999999;
var maxXX = 0;
var maxYY = 0;
var minYY = 999999;
var selectionCount =[selection count];
var sortedArr=[];
var alignDirection = "H";
// log(selectionCount);
alignH();

function alignH()
{


//Recognize the biggest object
    var biggestArea = 0;
    for (var i=0;i<selectionCount;i++)
    {
        var areaOfEach = selection[i].frame().width() * selection[i].frame().height()
        if (areaOfEach> biggestArea)
        {
            biggestArea = areaOfEach;
            biggestItemNumber = i;
        }
    }
    log(selection[biggestItemNumber].frame().x());


//Recognize the align direction

// start to align
    sortToBeAlignedShapes("h");
    alignShapes();
    
   
   
}

function sortToBeAlignedShapes(dir)
    {
        var j=0;
        
        var valueArr=[];
        
        var sortedRec=[];
        var smallestIndex=0;
        if (dir== "h")
        {
            for (var i=0; i<selectionCount;i++) // copy y's
            {
                valueArr[i] = selection[i].frame().x();
             }
            valueArr[biggestItemNumber] = 9999999;
        }
        else
        {
            for (var i=0; i<selectionCount;i++) // copy y's
            {
                valueArr[i] = selection[i].frame().y();
             }
            valueArr[biggestItemNumber] = 9999999;
        }        
        
        for (var j=0; j< selectionCount-1;j++) // get sorted order
        {
            var smallest = 999999;            
            for (var i=0; i<selectionCount;i++)
            {
                
                if (valueArr[i] < smallest)
                {
                    // log(valueArr[i] + ":"+smallest)
                    smallest = valueArr[i];
                    smallestIndex = i; 
                }
            }
             // log(smallestIndex+"and"+smallest);
            sortedArr[j] = smallestIndex;
            valueArr[smallestIndex] = 10000000;
        }

        for (var i=0; i< selectionCount-1;i++)
        {
            var j = sortedArr[i];
             // log("x's" + selection[j].frame().x());
        }
        
    }

function alignShapes()
{
    //  if ((maxY - minY) < (maxX - minX))  //Vertical difference defines direction.
    // {
        var totalWidth = 0
        for (var i=0; i< selectionCount;i++)
        {
            totalWidth+= selection[i].frame().width();
        }
        totalWidth-=selection[biggestItemNumber].frame().width();
        var totalSpace = selection[biggestItemNumber].frame().width() - totalWidth;
        var spaceBetween = totalSpace/(selectionCount);
        // Set equal space horizontally and vertically centre.
        var baseX = selection[biggestItemNumber].frame().x();
        for (var i=0; i<selectionCount-1;i++)
        {
            var j = sortedArr[i];
            selection[j].frame().setX(baseX+spaceBetween);
            selection[j].frame().setMidY(selection[biggestItemNumber].frame().midY());
            baseX = selection[j].frame().maxX();            
        }
    // }
    // else
    // {
    //     sort("h");
    //     var totalHeight = 0
    //     for (var i=0; i< selectionCount;i++)
    //     {
    //         totalHeight+= [selection[i],height];
    //     }
    //     var allSpace = [Biggest height] - totalHeight;
    //     var spaceBetween = allSpace/(selectionCount+1);
    //     // Set equal space horizontally and vertically centre.
    //     var baseY = [Biggest y];
    //     for (var i=0; i<selectionCount;i++)
    //     {
    //         [sortedRec[i],y]=baseY+spaceBetween;
    //         baseY = [sortedRec[i],maxY];
    //         [sortedRec[i],midX] = [Biggest midX];
    //     }
    // }

}



